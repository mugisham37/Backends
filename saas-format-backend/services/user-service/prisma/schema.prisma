generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id              String    @id @default(uuid())
  email           String    
  firstName       String?
  lastName        String?
  role            String    @default("user")
  isActive        Boolean   @default(true)
  lastLogin       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Multi-tenancy
  tenantId        String
  
  // Profile and preferences
  profile         UserProfile?
  preferences     UserPreference?
  
  // Composite unique constraint for email within a tenant
  @@unique([email, tenantId])
}

model UserProfile {
  id              String    @id @default(uuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatarUrl       String?
  jobTitle        String?
  department      String?
  location        String?
  bio             String?
  phoneNumber     String?
  timezone        String?
  language        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model UserPreference {
  id              String    @id @default(uuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme           String    @default("light")
  emailNotifications Boolean @default(true)
  pushNotifications Boolean @default(true)
  weeklyDigest    Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// User Audit Logs
model UserAuditLog {
  id              String    @id @default(uuid())
  userId          String?
  tenantId        String
  action          String    // created, updated, deleted, etc.
  performedBy     String?   // User ID who performed the action
  details         String?
  createdAt       DateTime  @default(now())
}
