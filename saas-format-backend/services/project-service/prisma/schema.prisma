generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Project Management
model Project {
  id              String    @id @default(uuid())
  name            String
  description     String?
  status          String    @default("active")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Multi-tenancy
  tenantId        String
  
  // Relations
  members         ProjectMember[]
  tasks           Task[]
}

model ProjectMember {
  id              String    @id @default(uuid())
  role            String    @default("member")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  projectId       String
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId          String
  
  @@unique([projectId, userId])
}

model Task {
  id              String    @id @default(uuid())
  title           String
  description     String?
  status          String    @default("todo")
  priority        String    @default("medium")
  dueDate         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  projectId       String
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assigneeId      String?
  
  // Task comments
  comments        TaskComment[]
  
  // Task attachments
  attachments     TaskAttachment[]
}

model TaskComment {
  id              String    @id @default(uuid())
  content         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  taskId          String
  task            Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId          String
}

model TaskAttachment {
  id              String    @id @default(uuid())
  fileName        String
  fileUrl         String
  fileSize        Int
  fileType        String
  createdAt       DateTime  @default(now())
  
  // Relations
  taskId          String
  task            Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId          String
}

// Project Audit Logs
model ProjectAuditLog {
  id              String    @id @default(uuid())
  projectId       String?
  tenantId        String
  action          String    // created, updated, deleted, etc.
  performedBy     String?   // User ID who performed the action
  details         String?
  createdAt       DateTime  @default(now())
}
