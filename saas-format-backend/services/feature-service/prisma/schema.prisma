generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Feature flag definition
model FeatureFlag {
  id          String   @id @default(uuid())
  key         String   // Unique identifier for the feature
  name        String   // Display name
  description String?  // Description of what the feature does
  isEnabled   Boolean  @default(false) // Global on/off switch
  
  // Feature type: boolean, string, number, json
  type        String   @default("boolean")
  
  // Default value for the feature (stored as JSON string)
  defaultValue String   @default("false")
  
  // Targeting rules and variations
  rules       Json?    // Rules for targeting specific users/segments
  
  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?  // User ID who created the feature
  updatedBy   String?  // User ID who last updated the feature
  
  // Relationships
  tenantOverrides TenantFeatureOverride[]
  userOverrides   UserFeatureOverride[]
  segments        FeatureFlagSegment[]
  
  @@unique([key])
}

// Tenant-specific feature flag overrides
model TenantFeatureOverride {
  id          String   @id @default(uuid())
  tenantId    String
  featureFlagId String
  featureFlag FeatureFlag @relation(fields: [featureFlagId], references: [id], onDelete: Cascade)
  
  // Override settings
  isEnabled   Boolean  @default(false)
  value       String?  // Override value (stored as JSON string)
  
  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?  // User ID who created the override
  updatedBy   String?  // User ID who last updated the override
  
  @@unique([tenantId, featureFlagId])
}

// User-specific feature flag overrides
model UserFeatureOverride {
  id          String   @id @default(uuid())
  userId      String
  featureFlagId String
  featureFlag FeatureFlag @relation(fields: [featureFlagId], references: [id], onDelete: Cascade)
  
  // Override settings
  isEnabled   Boolean  @default(false)
  value       String?  // Override value (stored as JSON string)
  
  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?  // User ID who created the override
  updatedBy   String?  // User ID who last updated the override
  
  @@unique([userId, featureFlagId])
}

// User segments for targeting
model Segment {
  id          String   @id @default(uuid())
  key         String   // Unique identifier for the segment
  name        String   // Display name
  description String?  // Description of the segment
  
  // Segment rules (e.g., user properties, percentages)
  rules       Json?    
  
  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?  // User ID who created the segment
  updatedBy   String?  // User ID who last updated the segment
  
  // Relationships
  featureFlags FeatureFlagSegment[]
  
  @@unique([key])
}

// Many-to-many relationship between feature flags and segments
model FeatureFlagSegment {
  id            String      @id @default(uuid())
  featureFlagId String
  featureFlag   FeatureFlag @relation(fields: [featureFlagId], references: [id], onDelete: Cascade)
  segmentId     String
  segment       Segment     @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  
  // Segment-specific settings
  isEnabled     Boolean     @default(false)
  value         String?     // Override value for this segment (stored as JSON string)
  
  // Audit fields
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@unique([featureFlagId, segmentId])
}

// Audit log for feature flag changes
model FeatureFlagAuditLog {
  id            String   @id @default(uuid())
  featureFlagId String?
  tenantId      String?
  userId        String?
  action        String   // created, updated, deleted, enabled, disabled
  details       Json?    // Details of the change
  performedBy   String?  // User ID who performed the action
  performedAt   DateTime @default(now())
}
