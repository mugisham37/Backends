name: Enhanced CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run Prettier check
        run: npm run format:check
        
      - name: Check TypeScript types
        run: npm run type-check
        
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --production
        
      - name: Run Snyk scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          
      - name: Run OWASP ZAP scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3000'
          
  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm test -- --coverage
        
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-test
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      kafka:
        image: confluentinc/cp-kafka:latest
        ports:
          - 9092:9092
        env:
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        options: >-
          --health-cmd "kafka-topics --bootstrap-server localhost:9092 --list"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run database migrations
        run: npm run migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          
      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          KAFKA_BROKERS: localhost:9092
          JWT_SECRET: test_secret
          
  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
        
      - name: Start services
        run: |
          docker-compose up -d
          npm run start:test &
          sleep 10
          
      - name: Run Cypress tests
        uses: cypress-io/github-action@v5
        with:
          browser: chrome
          record: true
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          
      - name: Stop services
        run: docker-compose down
        
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: e2e-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
        
      - name: Start services
        run: |
          docker-compose up -d
          npm run start:test &
          sleep 10
          
      - name: Run k6 load tests
        uses: grafana/k6-action@v0.2.0
        with:
          filename: performance/load-test.js
          flags: --out json=results.json
          
      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: results.json
          
      - name: Stop services
        run: docker-compose down
        
  accessibility-test:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: performance-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
        
      - name: Start services
        run: |
          npm run start:test &
          sleep 10
          
      - name: Run accessibility tests
        run: npm run test:a11y
        
      - name: Stop services
        run: pkill -f "npm run start:test" || true
        
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [unit-test, integration-test, e2e-test, performance-test, accessibility-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            server/dist
            client/dist
            services/*/dist
            
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/saas-platform
          tags: |
            type=ref,event=branch
            type=sha,format=short
            
      # Build and push API Gateway
      - name: Build and push API Gateway
        uses: docker/build-push-action@v4
        with:
          context: ./services/api-gateway
          push: true
          tags: ${{ steps.meta.outputs.tags }}-api-gateway
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/saas-platform:buildcache-api-gateway
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/saas-platform:buildcache-api-gateway,mode=max
          
      # Build and push other services
      # ... (similar steps for other services)
      
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
        
      - name: Deploy to Kubernetes
        run: |
          # Set image tag based on GitHub SHA
          TAG=${GITHUB_SHA::7}
          
          # Update Kubernetes manifests with new image tags
          sed -i "s|image:.*api-gateway.*|image: ${{ secrets.DOCKER_HUB_USERNAME }}/saas-platform:$TAG-api-gateway|g" kubernetes/staging/api-gateway-deployment.yaml
          # ... (similar commands for other services)
          
          # Apply Kubernetes manifests
          kubectl apply -f kubernetes/staging/
          
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/api-gateway -n staging
          # ... (similar commands for other services)
          
      - name: Run smoke tests
        run: npm run test:smoke -- --env=staging
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
        
      - name: Deploy to Kubernetes
        run: |
          # Set image tag based on GitHub SHA
          TAG=${GITHUB_SHA::7}
          
          # Update Kubernetes manifests with new image tags
          sed -i "s|image:.*api-gateway.*|image: ${{ secrets.DOCKER_HUB_USERNAME }}/saas-platform:$TAG-api-gateway|g" kubernetes/production/api-gateway-deployment.yaml
          # ... (similar commands for other services)
          
          # Apply Kubernetes manifests
          kubectl apply -f kubernetes/production/
          
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/api-gateway -n production
          # ... (similar commands for other services)
          
      - name: Run smoke tests
        run: npm run test:smoke -- --env=production
        
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify Slack on success
        if: ${{ success() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_TITLE: Deployment Successful
          SLACK_MESSAGE: "Deployment to ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }} completed successfully!"
          
      - name: Notify Slack on failure
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: danger
          SLACK_TITLE: Deployment Failed
          SLACK_MESSAGE: "Deployment to ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }} failed!"
