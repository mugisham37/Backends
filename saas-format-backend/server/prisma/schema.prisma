generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tenant Management
model Tenant {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  domain      String?  @unique
  plan        String   @default("free")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users       User[]
  projects    Project[]
  settings    TenantSettings?
}

model TenantSettings {
  id              String   @id @default(uuid())
  tenantId        String   @unique
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  logoUrl         String?
  primaryColor    String?
  allowSignup     Boolean  @default(true)
  maxUsers        Int      @default(5)
  maxProjects     Int      @default(10)
  maxStorage      Int      @default(1024) // in MB
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// User Management
model User {
  id              String    @id @default(uuid())
  email           String    
  password        String
  firstName       String?
  lastName        String?
  role            String    @default("user")
  isActive        Boolean   @default(true)
  lastLogin       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Multi-tenancy
  tenantId        String
  tenant          Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Relations
  projects        ProjectMember[]
  tasks           Task[]
  
  // Composite unique constraint for email within a tenant
  @@unique([email, tenantId])
}

// Project Management (Sample Application)
model Project {
  id              String    @id @default(uuid())
  name            String
  description     String?
  status          String    @default("active")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Multi-tenancy
  tenantId        String
  tenant          Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Relations
  members         ProjectMember[]
  tasks           Task[]
}

model ProjectMember {
  id              String    @id @default(uuid())
  role            String    @default("member")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  projectId       String
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
}

model Task {
  id              String    @id @default(uuid())
  title           String
  description     String?
  status          String    @default("todo")
  priority        String    @default("medium")
  dueDate         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  projectId       String
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assigneeId      String?
  assignee        User?     @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
}

// Subscription and Billing
model Subscription {
  id              String    @id @default(uuid())
  tenantId        String    @unique
  plan            String
  status          String    @default("active")
  startDate       DateTime  @default(now())
  endDate         DateTime?
  trialEndsAt     DateTime?
  canceledAt      DateTime?
  customerId      String?   // External payment provider customer ID
  subscriptionId  String?   // External payment provider subscription ID
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Feature Flags
model FeatureFlag {
  id              String    @id @default(uuid())
  name            String
  description     String?
  isEnabled       Boolean   @default(false)
  
  // For tenant-specific flags
  tenantId        String?
  
  // For global flags
  isGlobal        Boolean   @default(false)
  
  // For plan-specific flags
  plans           String[]  // Array of plan names
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([name, tenantId])
}
