{
  "name": "content-management-system",
  "version": "1.0.0",
  "description": "Modern content management system with senior-level architecture",
  "main": "dist/app.js",
  "type": "module",
  "scripts": {
    "// Development Commands": "",
    "dev": "tsx watch src/server.ts",
    "dev:debug": "tsx watch --inspect src/server.ts",
    "dev:verbose": "LOG_LEVEL=debug tsx watch src/server.ts",
    "dev:clean": "npm run clean && npm run dev",
    "// Building Commands": "",
    "build": "npm run clean && npm run typecheck && node scripts/esbuild.mjs && node scripts/fix-imports.js",
    "build:production": "NODE_ENV=production npm run build",
    "build:staging": "NODE_ENV=staging npm run build",
    "build:analyze": "npm run build && du -sh dist/*",
    "prebuild": "npm run typecheck",
    "postbuild": "echo 'âœ… Build completed successfully'",
    "// Production Commands": "",
    "start": "node dist/server.js",
    "start:production": "NODE_ENV=production node dist/server.js",
    "start:staging": "NODE_ENV=staging node dist/server.js",
    "start:cluster": "node -e \"require('cluster').fork()\" dist/server.js",
    "pm2:start": "pm2 start ecosystem.config.js",
    "pm2:stop": "pm2 stop ecosystem.config.js",
    "pm2:restart": "pm2 restart ecosystem.config.js",
    "pm2:logs": "pm2 logs",
    "// Testing Commands": "",
    "test": "vitest run",
    "test:watch": "vitest",
    "test:coverage": "vitest run --coverage",
    "test:ui": "vitest --ui",
    "test:e2e": "vitest run --config vitest.e2e.config.ts",
    "test:integration": "vitest run --config vitest.integration.config.ts",
    "test:unit": "vitest run --testNamePattern=\"unit\"",
    "test:smoke": "vitest run --testNamePattern=\"smoke\"",
    "test:all": "npm run test:unit && npm run test:integration && npm run test:e2e",
    "// Code Quality Commands": "",
    "lint": "biome check .",
    "lint:fix": "biome check --apply .",
    "lint:staged": "biome check --staged .",
    "format": "biome format --write .",
    "format:check": "biome format .",
    "typecheck": "tsc --noEmit",
    "typecheck:watch": "tsc --noEmit --watch",
    "quality": "npm run lint && npm run typecheck && npm run test",
    "// Database Commands": "",
    "db:generate": "drizzle-kit generate:pg",
    "db:migrate": "drizzle-kit push:pg",
    "db:migrate:up": "tsx scripts/migrate.ts up",
    "db:migrate:down": "tsx scripts/migrate.ts down",
    "db:migrate:status": "tsx scripts/migrate.ts status",
    "db:migrate:reset": "tsx scripts/migrate.ts reset",
    "db:migrate:validate": "tsx scripts/migrate.ts validate",
    "db:studio": "drizzle-kit studio",
    "db:seed": "tsx scripts/seed.ts",
    "db:backup": "tsx scripts/backup.ts",
    "db:restore": "tsx scripts/restore.ts",
    "// Performance & Optimization": "",
    "optimize": "tsx scripts/optimize-performance.ts",
    "performance:check": "tsx scripts/optimize-performance.ts",
    "performance:profile": "node --prof dist/server.js",
    "performance:analyze": "node --prof-process isolate-*.log > profile.txt",
    "db:optimize": "tsx scripts/optimize-performance.ts",
    "bundle:analyze": "npm run build && npx webpack-bundle-analyzer dist/",
    "// Maintenance Commands": "",
    "clean": "rimraf dist coverage .nyc_output",
    "clean:all": "npm run clean && rimraf node_modules package-lock.json",
    "clean:cache": "npm cache clean --force",
    "reinstall": "npm run clean:all && npm install",
    "reset": "npm run clean:all && npm install && npm run build",
    "// Security Commands": "",
    "security:audit": "npm audit",
    "security:fix": "npm audit fix",
    "security:check": "npm audit --audit-level moderate",
    "security:deps": "npx depcheck",
    "security:outdated": "npm outdated",
    "security:update": "npx npm-check-updates -u",
    "// Deployment Commands": "",
    "deploy:staging": "npm run build:staging && npm run test && echo 'Ready for staging deployment'",
    "deploy:production": "npm run build:production && npm run test:all && echo 'Ready for production deployment'",
    "deploy:docker": "docker build -t cms-api . && docker run -p 3000:3000 cms-api",
    "deploy:verify": "npm run health:check && npm run test:smoke",
    "// Health & Monitoring": "",
    "health:check": "curl -f http://localhost:3000/health || exit 1",
    "health:ready": "curl -f http://localhost:3000/ready || exit 1",
    "health:metrics": "curl http://localhost:3000/metrics",
    "logs:tail": "tail -f logs/app.log",
    "logs:error": "tail -f logs/error.log",
    "logs:access": "tail -f logs/access.log",
    "// Development Utilities": "",
    "setup": "tsx scripts/setup.ts",
    "setup:full": "tsx scripts/setup.ts --verbose",
    "setup:quick": "tsx scripts/setup.ts --skip-db",
    "setup:fresh": "npm run clean && npm run setup",
    "docs:generate": "tsx scripts/generate-docs.ts",
    "docs:serve": "http-server docs -p 8080",
    "env:validate": "tsx scripts/validate-env.ts",
    "config:check": "tsx scripts/check-config.ts",
    "// Pre-commit & CI/CD": "",
    "precommit": "npm run lint:staged && npm run typecheck",
    "prepush": "npm run test && npm run build",
    "ci": "npm run quality && npm run build && npm run test:all",
    "ci:cache": "npm ci --cache .npm --prefer-offline",
    "release": "npm run ci && npm version patch && git push --tags",
    "release:minor": "npm run ci && npm version minor && git push --tags",
    "release:major": "npm run ci && npm version major && git push --tags"
  },
  "keywords": [
    "content-management",
    "fastify",
    "typescript",
    "postgresql",
    "drizzle"
  ],
  "author": "",
  "license": "MIT",
  "dependencies": {
    "@apollo/server": "^5.0.0",
    "@fastify/compress": "^8.0.0",
    "@fastify/cors": "^10.0.0",
    "@fastify/helmet": "^12.0.0",
    "@fastify/jwt": "^10.0.0",
    "@fastify/multipart": "^9.0.0",
    "@fastify/rate-limit": "^10.0.0",
    "@fastify/swagger": "^9.0.0",
    "@fastify/swagger-ui": "^5.0.0",
    "@types/bcrypt": "^6.0.0",
    "@types/express": "^5.0.3",
    "@types/jsonwebtoken": "^9.0.10",
    "bcrypt": "^6.0.0",
    "bullmq": "^4.15.4",
    "dataloader": "^2.2.3",
    "dotenv": "^16.3.1",
    "drizzle-orm": "^0.29.1",
    "express": "^5.1.0",
    "express-rate-limit": "^8.1.0",
    "fastify": "^5.0.0",
    "fastify-plugin": "^5.0.1",
    "graphql": "^16.8.1",
    "graphql-tag": "^2.12.6",
    "ioredis": "^5.3.2",
    "jsonwebtoken": "^9.0.2",
    "mercurius": "^13.3.3",
    "pg": "^8.11.3",
    "pino": "^8.17.2",
    "pino-pretty": "^10.3.1",
    "postgres": "^3.4.7",
    "rate-limit-redis": "^4.2.2",
    "reflect-metadata": "^0.1.13",
    "tslib": "^2.8.1",
    "tsyringe": "^4.8.0",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "@biomejs/biome": "1.4.1",
    "@types/node": "^20.10.4",
    "@types/pg": "^8.10.9",
    "@vitest/coverage-v8": "^1.0.4",
    "drizzle-kit": "^0.20.6",
    "esbuild": "^0.25.10",
    "rimraf": "^6.0.1",
    "tsx": "^4.6.2",
    "typescript": "^5.3.3",
    "vitest": "^1.0.4"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}
