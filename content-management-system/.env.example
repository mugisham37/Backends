# Content Management System Backend - Environment Configuration
# Copy this file to .env and update the values for your environment

# =============================================================================
# CORE SERVER CONFIGURATION
# =============================================================================

# Environment: development, staging, production, test
NODE_ENV=development

# Server host and port
HOST=localhost
PORT=3000

# =============================================================================
# DATABASE CONFIGURATION (PostgreSQL)
# =============================================================================

# Primary database connection string
DATABASE_URL=postgresql://postgres:password@localhost:5432/cms_dev

# Individual database connection parameters
DB_HOST=localhost
DB_PORT=5432
DB_NAME=cms_dev
DB_USER=postgres
DB_PASSWORD=password
DB_SSL=false

# Connection pool settings
DB_MAX_CONNECTIONS=20
DB_CONNECTION_TIMEOUT=60000
DB_IDLE_TIMEOUT=300000

# =============================================================================
# REDIS CONFIGURATION (Optional - for caching and sessions)
# =============================================================================

REDIS_URI=redis://localhost:6379
REDIS_PASSWORD=
REDIS_DB=0
REDIS_MAX_RETRIES=3
REDIS_CONNECT_TIMEOUT=10000

# =============================================================================
# JWT AUTHENTICATION CONFIGURATION
# =============================================================================

# JWT secrets (MUST be at least 32 characters and unique per environment)
JWT_SECRET=your-super-secure-jwt-secret-key-minimum-32-characters-long-change-in-production
JWT_REFRESH_SECRET=your-super-secure-refresh-secret-key-minimum-32-characters-long-change-in-production

# Token expiration times
JWT_ACCESS_EXPIRES_IN=15m
JWT_REFRESH_EXPIRES_IN=7d

# JWT issuer and audience
JWT_ISSUER=cms-api
JWT_AUDIENCE=cms-client

# JWT algorithm (HS256, HS384, HS512, RS256, etc.)
JWT_ALGORITHM=HS256

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# CORS settings
CORS_ORIGIN=http://localhost:3000,http://localhost:3001
CORS_CREDENTIALS=true

# Rate limiting
RATE_LIMIT_MAX=100
RATE_LIMIT_WINDOW=900000

# Password hashing
BCRYPT_ROUNDS=12

# Session configuration
SESSION_SECRET=your-session-secret-change-in-production-minimum-32-characters
SESSION_MAX_AGE=86400000

# CSRF protection
CSRF_ENABLED=true

# API Keys (for service-to-service communication)
API_KEY_HEADER=X-API-Key
API_KEYS=dev-key-1,dev-key-2

# =============================================================================
# FILE UPLOAD CONFIGURATION
# =============================================================================

# Maximum file size in bytes (10MB default)
MAX_FILE_SIZE=10485760

# Allowed MIME types (comma-separated)
ALLOWED_MIME_TYPES=image/jpeg,image/png,image/gif,image/webp,application/pdf,text/plain,text/csv

# Upload destination directory
UPLOAD_DESTINATION=./uploads

# Maximum number of files per request
MAX_FILES_PER_REQUEST=5

# =============================================================================
# FEATURE FLAGS
# =============================================================================

# Enable/disable features
ENABLE_GRAPHQL=true
ENABLE_WEBHOOKS=true
ENABLE_MULTI_TENANCY=true
ENABLE_AUDIT_LOGS=true
ENABLE_MEDIA_PROCESSING=true
ENABLE_SEARCH=true
ENABLE_CACHING=true

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

# Log level: error, warn, info, debug, trace
LOG_LEVEL=debug

# Log format: json, pretty
LOG_FORMAT=pretty

# Enable/disable specific log types
LOG_REQUESTS=true
LOG_RESPONSES=true
LOG_ERRORS=true
LOG_PERFORMANCE=true

# Log file paths (optional)
LOG_FILE_PATH=./logs/app.log
ERROR_LOG_FILE_PATH=./logs/error.log
ACCESS_LOG_FILE_PATH=./logs/access.log

# =============================================================================
# MONITORING & OBSERVABILITY
# =============================================================================

# Enable monitoring features
ENABLE_MONITORING=true
ENABLE_METRICS=true
ENABLE_HEALTH_CHECKS=true

# Health check intervals (milliseconds)
HEALTH_CHECK_INTERVAL=30000
DATABASE_HEALTH_CHECK_TIMEOUT=5000

# Performance monitoring
ENABLE_PERFORMANCE_MONITORING=true
SLOW_QUERY_THRESHOLD=1000

# =============================================================================
# EXTERNAL SERVICES (Optional)
# =============================================================================

# Email service (for notifications)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password

# Search service (Elasticsearch - optional)
ELASTICSEARCH_NODE=http://localhost:9200
ELASTICSEARCH_AUTH=
ELASTICSEARCH_INDEX=cms_content

# Cloud storage (AWS S3 - optional)
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=your-access-key
AWS_SECRET_ACCESS_KEY=your-secret-key
AWS_S3_BUCKET=your-bucket-name

# =============================================================================
# DEVELOPMENT CONFIGURATION
# =============================================================================

# Development-specific settings
DEV_ENABLE_PLAYGROUND=true
DEV_ENABLE_INTROSPECTION=true
DEV_ENABLE_DEBUG_ROUTES=true

# Hot reload settings
DEV_WATCH_FILES=true
DEV_WATCH_EXTENSIONS=.ts,.js,.json

# =============================================================================
# PRODUCTION CONFIGURATION NOTES
# =============================================================================

# For production deployment, make sure to:
# 1. Change all secrets and passwords
# 2. Set NODE_ENV=production
# 3. Use strong JWT secrets (minimum 32 characters)
# 4. Configure proper CORS origins
# 5. Set appropriate rate limits
# 6. Enable SSL for database connections
# 7. Use environment-specific database
# 8. Configure proper logging levels
# 9. Set up monitoring and alerting
# 10. Use secure session secrets

# =============================================================================
# TESTING CONFIGURATION
# =============================================================================

# Test database (used when NODE_ENV=test)
TEST_DATABASE_URL=postgresql://postgres:password@localhost:5432/cms_test

# Test-specific settings
TEST_JWT_SECRET=test-jwt-secret-for-testing-only
TEST_LOG_LEVEL=error
TEST_DISABLE_AUTH=false